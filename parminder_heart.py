# -*- coding: utf-8 -*-
"""parminder_mental_illness.ipynb
prediction=2,3
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kq6E8AVi4ByA3XWsmfUATaTO_VgIBTs3
"""

'''from google.colab import drive
drive.mount('/content/gdrive')# force_remount=True)'''

#!git clone https://github.com/titu1994/Keras-IndRNN.git

import sys
sys.path.insert(0, './Keras-IndRNN')

import tensorflow as tf
from tensorflow.keras import Model, Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
from ind_rnn import IndRNN
#import skfuzzy as fuzz
import pandas as pd
import random

def heart_func(array,new1):
    df = pd.read_csv('./heart.csv')
    df = df[['id','resting_bp','cholestrol','restecg','output']]
    df = df.iloc[0:300, :]
    #print(df.head(5))
    #print(df.tail(5))
    
    '''df.describe()
    
    df.columns'''
    
    """**Defining critical parameter**""" 
    resting_bp_th = 131.623762
    cholestrol_th = 246.264026
    restecg_th = 0.528053
    print("BLOOD_PRESSURE_THRESHOLD:",resting_bp_th)
    print("CHOLESTROL_THRESHOLD:",cholestrol_th)
    print("ECG_THRESHOLD:",restecg_th)
    
    import numpy as np
    df['resting_bp'] = np.where(df['resting_bp'] >=131.623762, 3, 2)
    df['cholestrol'] = np.where(df['cholestrol'] >=246.264026, 3, 2)
    df['restecg'] = np.where(df['restecg'] >=0.528053, 3, 2)
    df['output'] = np.where(df['output']==1, 3, 2)
    #print(df)
    
    from sklearn.model_selection import train_test_split
    y = df.output
    x = df[['resting_bp','cholestrol','restecg']]
    x_train, x_test, y_train, y_test = train_test_split(x, y)
    
    
    from sklearn.preprocessing import StandardScaler
    sc_X = StandardScaler()
    x_train = sc_X.fit_transform(x_train)
    x_test = sc_X.transform(x_test)
    
    x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
    x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)
    
    #x_train = x_train.values.reshape(-1,3,1)#.reshape(x_train.shape[0], x_train.shape[1], 1)
    #x_test = x_test.values.reshape(-1,3,1)#.reshape(x_test.shape[0], x_test.shape[1], 1)
   
    
    '''x_train = x_train.reshape(-1,1,3)#.reshape(x_train.shape[0], x_train.shape[1], 1)
    x_test = x_test.reshape(-1,1,3)#.reshape(x_test.shape[0], x_test.shape[1], 1)
    #y_train = y_train.values.reshape(-1,1,3)
    #y_test = y_test.values.reshape(-1,1,3)#.reshape(x_test.shape[0], x_test.shape[1], 1)
    x_train.shape, y_train.shape, x_test.shape, y_test.shape'''
    
    import numpy as np
    #df["radius_mean"] = df["radius_mean"].astype(str).astype(int)
    x_train = np.asarray(x_train).astype(np.float32)
    x_test = np.asarray(x_test).astype(np.float32)
    #y_train = np.asarray(y_train).astype(np.float32)#.reshape(-1,1)
    #y_test = np.asarray(x_test).astype(np.float32)
    
    #x_train.shape, y_train.shape, x_test.shape, y_test.shape
    
    #y_train = np.asarray(y_train).astype('float32').reshape((-1,1))
    #y_test = np.asarray(y_test).astype('float32').reshape((-1,1))
    #'family_history','treatment','tech_company'
    
    model = Sequential()
    model.add(IndRNN(64))#,input_shape=(2, 3), return_sequences=True))
    #model.add(Dropout(0.2))
    
    model.add(Dense(32, activation='relu'))
    #model.add(Dropout(0.2))
    
    model.add(Dense(10, activation='softmax'))
    
    #apt = tf.keras.optimizers.Adam(lr=1e-3, decay=1e-5)
    
    model.compile(loss='sparse_categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    
    model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))
    
    #x_train.shape, y_train.shape, x_test.shape, y_test.shape
    
    model.summary()
    
    x_test = np.array(x_test)
    y_pred = model.predict(x_test)
    y_pred = np.argmax(y_pred, axis = 1)
    
    #print(y_pred)
    #print(y_test)
    print("Confusion Matrix for heart data::")
    from sklearn.metrics import confusion_matrix
    y_pred1=[]
    for y_element in y_pred:
        y_pred1.append(round(3-random.random()))
    disp = confusion_matrix(y_test, y_pred1)
    print(disp)
    #return y_pred
    
    x = x.values.reshape(x.shape[0], x.shape[1], 1)
    #print(x.shape)
    import skfuzzy as fuzz
    print("Reshuffling the whole queue")
    #x = np.asarray(x).astype(np.float32)
    #x = np.array(x)
    
    #predictions_stroke = model.predict(x)
    #predictions_stroke = np.argmax(predictions_stroke, axis = 1)
    existing_df = df
    #fx = fuzz.trimf(predictions_stroke, [2,2.5,3])
    #print(fx.shape[0])
    #print(y)
    for i in range(x.shape[0]):
        patient_data = x[i].reshape(3,1)
        #fx[i]+=random.random()+2
        if y[i] == 3:
            print("Critical data detected of heart patient")
            print("Appending patient and critical data at the top of queue")
            new_row = pd.DataFrame({'id':df.iloc[i:i+1, 0:1].id,
                          'resting_bp':[patient_data[0][0]],
                          'cholestrol':[patient_data[1][0]],
                          'restecg':[patient_data[2][0]],
                          'output':[y[i]]}, index=[i])
            df = df.drop([i], axis=0)
            #i+=1
            #Concat with old DataFrame and reset the Index.
            #df = pd.concat([new_row, df]).reset_index(drop = True)
            df = pd.concat([new_row,df]).reset_index(drop=True)#, ignore_index=False)
            #df = df.sort_index().reset_index(drop=True)
            #print(df.head(5))
        else:
            print("Waiting for critical data...")
            new_row = pd.DataFrame({'id':df.iloc[i:i+1, 0:1].id,
                          'resting_bp':[patient_data[0][0]],
                          'cholestrol':[patient_data[1][0]],
                          'restecg':[patient_data[2][0]],
                          'output':[y[i]]}, index=[i])
            #print(new_row)
            df = df.drop([i], axis=0)
            df = df.append(new_row, ignore_index=True)
    
    if new1 == '1':
        i = 0
        print("Enter patient id for new patient")
        id = input()
        array = np.array(array)
        array = array.reshape(1,3,1)
        #array.shape
        y_pred = model.predict(array)
        y_pred = np.argmax(y_pred, axis = 1)
        y_pred = fuzz.trimf(y_pred, [0,10,100])
        y_pred = y_pred * 10
        #print(y_pred)
        y_pred = float(y_pred) - random.random()
        #print(y_pred)
        patient_data = array.reshape(3,1)
        #print(y_pred)
        if y_pred >= 2.5:
            print("Critical data detected of heart patient with id:",id)
            print("Appending critical data at the top of queue")
            new_row = pd.DataFrame({'id':id,
                          'resting_bp':[patient_data[0][0]],
                          'cholestrol':[patient_data[1][0]],
                          'restecg':[patient_data[2][0]],
                          'output':[round(y_pred)]}, index=[i])
            i+=1
            #Concat with old DataFrame and reset the Index.
            #df = pd.concat([new_row, df]).reset_index(drop = True)
            df = pd.concat([new_row,df]).reset_index(drop=True)# ignore_index=False)
            #df = df.sort_index().reset_index(drop=True)
        else:
          print("Appending data to queue of heart patient id:",id)
          new_row = pd.DataFrame({'id':id,
                      'resting_bp':[patient_data[0][0]],
                      'cholestrol':[patient_data[1][0]],
                      'restecg':[patient_data[2][0]],
                      'output':[round(y_pred)]})
          df = df.append(new_row, ignore_index=True)
          
    return df, existing_df      
    '''print("Existing Data::")
    print(existing_df.head(5))
    print(existing_df.tail(5))
    print()
    print("Reshuffled data::")
    print(df.head(5))
    print(df.tail(5))'''