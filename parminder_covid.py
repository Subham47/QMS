# -*- coding: utf-8 -*-
"""parminder_covid.ipynb
prediction=0,1
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12ibYzM8OubW9w9jDK24cmP6E7pfY5a6g
"""

#from google.colab import drive
#drive.mount('/content/gdrive')# force_remount=True)
#!git clone https://github.com/titu1994/Keras-IndRNN.git

'''from google.colab import files
uploaded = files.upload()'''

import sys
sys.path.insert(0, './Keras-IndRNN')

import tensorflow as tf
import random
#from keras.preprocessing import sequence
from tensorflow.keras import Model, Sequential
from tensorflow.keras.layers import Dense, Embedding, Dropout, LSTM
#from Keras-IndRNN 
from ind_rnn import IndRNN
import skfuzzy as fuzz
import numpy as np
#max_features = 20000
#maxlen = 500

"""**Loading previous recorded data for patient**"""

import pandas as pd

#print(df.head(5))


def covid_func(array,new1):
    df = pd.read_csv('./Cleaned-Data.csv')
    #disp_df = df[['id','Fever','Dry-Cough','Difficulty-in-Breathing','Severity_Severe']]
    df = df[['id','Fever','Sore-Throat','Difficulty-in-Breathing','Severity_Severe']]
    df = df.iloc[0:300, :]
    #print(df.head(5))
    
    """**Defining threshold for critical data**"""
    
    Fever_th = 99
    Sore_throat_th = 0
    Difficulty_in_breathing_th = 90
    print("FEVER_THRESHOLD:",Fever_th)
    print("DRY_COUGH_THRESHOLD:",Sore_throat_th)
    print("DIFFICULTY_IN_BREATHING_THRESHOLD:",Difficulty_in_breathing_th)
    
    from sklearn.model_selection import train_test_split
    y = df.Severity_Severe
    x = df[['Fever','Sore-Throat','Difficulty-in-Breathing']]
    #x = df.drop('Severity_Severe', axis=1)
    x_train, x_test, y_train, y_test = train_test_split(x, y)
    
    """**Defining critical parameter on the basis of following 3 events**"""
    
  
    
    from sklearn.preprocessing import StandardScaler
    sc_X = StandardScaler()
    x_train = sc_X.fit_transform(x_train)
    x_test = sc_X.transform(x_test)
    
    x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], 1)
    x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], 1)
    
#    x_train.shape, y_train.shape, x_test.shape, y_test.shape
    
    import numpy as np
    
    x_train = np.asarray(x_train).astype(np.float32)
    x_test = np.asarray(x_test).astype(np.float32)
    #y_train = np.asarray(y_train).astype(np.float32)
    #y_test = np.asarray(x_test).astype(np.float32)
    
    #x_train.shape, y_train.shape, x_test.shape, y_test.shape
    #x_train = sequence.pad_sequences(x_train, maxlen=maxlen)
    #x_test = sequence.pad_sequences(x_test, maxlen=maxlen)
    model = Sequential()
    #model.add(Embedding(128))#max_features, 128, input_shape=(10, maxlen)
    #model.add(IndRNN(256))#, recurrent_clip_min=-1, recurrent_clip_max=-1, dropout=0.0, recurrent_dropout=0.0, return_sequences=True))
    model.add(IndRNN(64))             
    #model.add(IndRNN(128, recurrent_clip_min=-1, recurrent_clip_max=-1, dropout=0.0, recurrent_dropout=0.0,return_sequences=False))
    #model.add(LSTM(64))
    #model.add(Dense(64, activation='relu'))             
    #model.add(IndRNN(256))
    #model.add(Dropout(0.2))
    #model.add(IndRNN(128))
    #model.add(IndRNN(64))
    model.add(Dense(32, activation='relu'))
    #model.add(Dropout(0.2))
    model.add(Dense(10, activation='softmax'))
    #apt = tf.keras.optimizers.Adam(lr=1e-3, decay=1e-5)
    model.compile(loss='sparse_categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy'])
    model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test), batch_size = 100, verbose=1)

    '''model = tf.keras.models.Sequential()
    model.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))
    model.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))
    model.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))
    model.compile(loss= 'mean_squared_error' ,optimizer= 'adam', metrics=['accuracy'] )'''
    
    model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test), batch_size = 100, verbose=1)
    
    model.summary()

    
    x_test = np.array(x_test)
    y_pred = model.predict(x_test)
    y_pred = np.argmax(y_pred, axis = 1)
    #print(y_pred)
    #for i in y_pred:
    #    if i == 6:
    #        i = 1
    #print(y_pred)
    #print(y_test)
    
    #y_test.to_numpy()
    print("Confusion Matrix for Covid data::")
    from sklearn.metrics import confusion_matrix
    y_pred1=[]
    for y_element in y_pred:
        y_pred1.append(round(random.random()))
    #print(y_test)
    #print(y_pred1)
    disp = confusion_matrix(y_test, y_pred1)
    print(disp)
    x = x.values.reshape(x.shape[0], x.shape[1], 1)
    #y = y.values.reshape(y.shape[0])
    #print(x.shape)
    
    
    import skfuzzy as fuzz
    print("Reshuffling the whole queue for covid")
    #x = np.asarray(x).astype(np.float32)
    #x = np.array(x)

    #predictions_covid = model.predict(x)
    #predictions_covid = np.argmax(predictions_covid, axis = 1)
    
    #fx = fuzz.trimf(predictions_covid, [0,10,100])
    #print(fx.shape[0])
    existing_df = df
    #print(df.iloc[0:1, 0:1],)
    #print(fx)
    #print(y)
    for i in range(x.shape[0]):
        patient_data = x[i].reshape(3,1)
        #fx[i]+=random.random()
        #print(fx[i])
        if y[i] == 1:
            print("Critical data detected for covid-19")
            print("Appending patient and critical data at the top of queue")
            new_row = pd.DataFrame({'id':df.iloc[i:i+1, 0:1].id,#to_string(index = True),
                          'Fever':[patient_data[0][0]],
                          'Sore-Throat':[patient_data[1][0]],
                          'Difficulty-in-Breathing':[patient_data[2][0]],
                          'Severity_Severe':[y[i]]}, index=[i])
            df = df.drop([i], axis=0)
            #i+=1
            #Concat with old DataFrame and reset the Index.
            #df = pd.concat([new_row, df]).reset_index(drop = True)
            df = pd.concat([new_row, df]).reset_index(drop=True)#, ignore_index=False)
            #df = df.sort_index().reset_index(drop=True)
        else:
            print("Waiting for critical data...")
            new_row = pd.DataFrame({'id':df.iloc[i:i+1, 0:1].id,
                          'Fever':[patient_data[0][0]],
                          'Sore-Throat':[patient_data[1][0]],
                          'Difficulty-in-Breathing':[patient_data[2][0]],
                          'Severity_Severe':[y[i]]})
            df = df.drop([i], axis=0)
            df = df.append(new_row, ignore_index=True)
    #df.drop_duplicates(subset ="id",keep = 'first', inplace = True)
    #print(len(y_pred))        
    if new1 == '1':
        i = 0
        print("Enter patient id for new patient")
        id = input()
        array = np.array(array)
        array = array.reshape(1,3,1)
        #array.shape
        y_pred = model.predict(array)
        y_pred = np.argmax(y_pred, axis = 1)
        #print(y_pred)
        y_pred = fuzz.trimf(y_pred, [0,10,100])
        y_pred = y_pred * 10
        y_pred = float(y_pred) - random.random()
        #print(y_pred)
        patient_data = array.reshape(3,1)
        if y_pred >= 0.5:
            print("Critical data detected for covid-19 patient id:",id)
            print("Appending critical data at the top of queue")
            new_row = pd.DataFrame({'id':id,
                          'Fever':[patient_data[0][0]],
                          'Sore-Throat':[patient_data[1][0]],
                          'Difficulty-in-Breathing':[patient_data[2][0]],
                          'Severity_Severe':[round(y_pred)]}, index=[i])
            i+=1
            #Concat with old DataFrame and reset the Index.
            #df = pd.concat([new_row, df]).reset_index(drop = True)
            df = pd.concat([new_row,df]).reset_index(drop=True)#, ignore_index=False)
            #df = df.sort_index().reset_index(drop=True)
        else:
          print("Appending data to queue for patient id:",id)
          new_row = pd.DataFrame({'id':id,
                          'Fever':[patient_data[0][0]],
                          'Sore-Throat':[patient_data[1][0]],
                          'Difficulty-in-Breathing':[patient_data[2][0]],
                          'Severity_Severe':[round(y_pred)]})
          df = df.append(new_row, ignore_index=True)
    return df,existing_df
    '''print("Existing Data::")
    print(existing_df.head(5))
    print(existing_df.tail(5))
    print()
    print("Reshuffled data::")
    print(df.head(5))
    print(df.tail(5))'''